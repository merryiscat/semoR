package com.semo.alarm.ui.viewmodels

import android.app.Application
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.viewModelScope
import com.semo.alarm.data.entities.ReportData
import com.semo.alarm.data.repositories.ReportRepository
import com.semo.alarm.data.repositories.WeeklyStats
import com.semo.alarm.data.repositories.MonthlyStats
import com.semo.alarm.data.dao.SleepTrendPoint
import com.semo.alarm.data.dao.TimerTrendPoint
import com.semo.alarm.data.dao.LifestyleTrendPoint
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class ReportViewModel @Inject constructor(
    private val application: Application,
    private val reportRepository: ReportRepository
) : AndroidViewModel(application) {
    
    // LiveData for UI observing
    val todaysReport: LiveData<ReportData?> = reportRepository.getTodaysReport()
    val weeklyReports: LiveData<List<ReportData>> = reportRepository.getWeeklyReports()
    val monthlyReports: LiveData<List<ReportData>> = reportRepository.getMonthlyReports()
    
    // Private MutableLiveData for loading states and errors
    private val _isLoading = MutableLiveData<Boolean>(false)
    val isLoading: LiveData<Boolean> = _isLoading
    
    private val _errorMessage = MutableLiveData<String?>()
    val errorMessage: LiveData<String?> = _errorMessage
    
    private val _weeklyStats = MutableLiveData<WeeklyStats?>()
    val weeklyStats: LiveData<WeeklyStats?> = _weeklyStats
    
    private val _monthlyStats = MutableLiveData<MonthlyStats?>()
    val monthlyStats: LiveData<MonthlyStats?> = _monthlyStats
    
    // Chart data
    private val _sleepTrendData = MutableLiveData<List<SleepTrendPoint>>()
    val sleepTrendData: LiveData<List<SleepTrendPoint>> = _sleepTrendData
    
    private val _timerTrendData = MutableLiveData<List<TimerTrendPoint>>()
    val timerTrendData: LiveData<List<TimerTrendPoint>> = _timerTrendData
    
    private val _lifestyleTrendData = MutableLiveData<List<LifestyleTrendPoint>>()
    val lifestyleTrendData: LiveData<List<LifestyleTrendPoint>> = _lifestyleTrendData
    
    // Insights data
    private val _personalityType = MutableLiveData<PersonalityType>()
    val personalityType: LiveData<PersonalityType> = _personalityType
    
    private val _suggestions = MutableLiveData<List<Suggestion>>()
    val suggestions: LiveData<List<Suggestion>> = _suggestions
    
    init {
        refreshAllData()
    }
    
    fun refreshAllData() {
        viewModelScope.launch {
            _isLoading.value = true
            try {
                // Generate today's report if not exists
                generateTodaysReportIfNeeded()
                
                // Load statistics
                loadWeeklyStats()
                loadMonthlyStats()
                
                // Load chart data
                loadChartData()
                
                // Generate insights
                generateInsights()
                
            } catch (e: Exception) {
                _errorMessage.value = "Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${e.message}"
            } finally {
                _isLoading.value = false
            }
        }
    }
    
    fun generateTodaysReportIfNeeded() {
        viewModelScope.launch {
            try {
                reportRepository.generateTodaysReport()
            } catch (e: Exception) {
                _errorMessage.value = "Ïò§Îäò Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${e.message}"
            }
        }
    }
    
    private suspend fun loadWeeklyStats() {
        try {
            val stats = reportRepository.getWeeklyStats()
            _weeklyStats.value = stats
        } catch (e: Exception) {
            _errorMessage.value = "Ï£ºÍ∞Ñ ÌÜµÍ≥Ñ Î°úÎî© Ïò§Î•ò: ${e.message}"
        }
    }
    
    private suspend fun loadMonthlyStats() {
        try {
            val stats = reportRepository.getMonthlyStats()
            _monthlyStats.value = stats
        } catch (e: Exception) {
            _errorMessage.value = "ÏõîÍ∞Ñ ÌÜµÍ≥Ñ Î°úÎî© Ïò§Î•ò: ${e.message}"
        }
    }
    
    private suspend fun loadChartData() {
        try {
            // Load 7 days trend data
            val sleepData = reportRepository.getSleepTrendData(7)
            _sleepTrendData.value = sleepData
            
            val timerData = reportRepository.getTimerTrendData(7)
            _timerTrendData.value = timerData
            
            val lifestyleData = reportRepository.getLifestyleTrendData(7)
            _lifestyleTrendData.value = lifestyleData
            
        } catch (e: Exception) {
            _errorMessage.value = "Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ïò§Î•ò: ${e.message}"
        }
    }
    
    private suspend fun generateInsights() {
        try {
            val weeklyStats = _weeklyStats.value ?: return
            
            // Analyze personality type
            val personality = analyzePersonality(weeklyStats)
            _personalityType.value = personality
            
            // Generate suggestions
            val suggestions = generateSuggestions(weeklyStats)
            _suggestions.value = suggestions
            
        } catch (e: Exception) {
            _errorMessage.value = "Ïù∏ÏÇ¨Ïù¥Ìä∏ ÏÉùÏÑ± Ïò§Î•ò: ${e.message}"
        }
    }
    
    private fun analyzePersonality(stats: WeeklyStats): PersonalityType {
        // TODO: Implement more sophisticated analysis
        return when {
            stats.averageSleepDuration >= 450 && stats.averageAlarmDismissalTime <= 120 -> PersonalityType.EARLY_BIRD
            stats.averageSleepDuration < 360 && stats.averageAlarmDismissalTime > 300 -> PersonalityType.NIGHT_OWL
            else -> PersonalityType.NORMAL
        }
    }
    
    private fun generateSuggestions(stats: WeeklyStats): List<Suggestion> {
        val suggestions = mutableListOf<Suggestion>()
        
        // Sleep improvement suggestions
        if (stats.averageSleepDuration < 420) { // Less than 7 hours
            suggestions.add(
                Suggestion(
                    type = SuggestionType.SLEEP,
                    title = "ÏàòÎ©¥ ÏãúÍ∞Ñ ÎäòÎ¶¨Í∏∞",
                    description = "ÌèâÍ∑† ÏàòÎ©¥ ÏãúÍ∞ÑÏù¥ Î∂ÄÏ°±Ìï©ÎãàÎã§. 30Î∂Ñ ÏùºÏ∞ç Ïû†ÏûêÎ¶¨Ïóê Îì§Ïñ¥Î≥¥ÏÑ∏Ïöî.",
                    priority = SuggestionPriority.HIGH
                )
            )
        }
        
        // Alarm consistency suggestions
        if (stats.averageAlarmDismissalTime > 180) { // More than 3 minutes
            suggestions.add(
                Suggestion(
                    type = SuggestionType.ALARM,
                    title = "Í∏∞ÏÉÅ ÏäµÍ¥Ä Í∞úÏÑ†",
                    description = "ÏïåÎûåÏùÑ Îçî Îπ®Î¶¨ Ìï¥Ï†úÌïòÎäî ÏäµÍ¥ÄÏùÑ ÎßåÎì§Ïñ¥Î≥¥ÏÑ∏Ïöî.",
                    priority = SuggestionPriority.MEDIUM
                )
            )
        }
        
        // Timer usage suggestions
        if (stats.averageTimerCompletionRate < 0.8) { // Less than 80%
            suggestions.add(
                Suggestion(
                    type = SuggestionType.TIMER,
                    title = "ÌÉÄÏù¥Î®∏ ÏôÑÏ£ºÏú® Ìñ•ÏÉÅ",
                    description = "Îçî ÏßßÏùÄ ÏãúÍ∞ÑÎ∂ÄÌÑ∞ ÏãúÏûëÌï¥ÏÑú Ï†êÏßÑÏ†ÅÏúºÎ°ú ÎäòÎ†§Î≥¥ÏÑ∏Ïöî.",
                    priority = SuggestionPriority.MEDIUM
                )
            )
        }
        
        // Productivity suggestions
        if (stats.averageProductivityScore < 70) {
            suggestions.add(
                Suggestion(
                    type = SuggestionType.PRODUCTIVITY,
                    title = "ÏÉùÏÇ∞ÏÑ± Ìñ•ÏÉÅ",
                    description = "Í∑úÏπôÏ†ÅÏù∏ ÌÉÄÏù¥Î®∏ ÏÇ¨Ïö©ÏúºÎ°ú ÏßëÏ§ëÎ†•ÏùÑ ÎÜíÏó¨Î≥¥ÏÑ∏Ïöî.",
                    priority = SuggestionPriority.LOW
                )
            )
        }
        
        return suggestions
    }
    
    fun clearErrorMessage() {
        _errorMessage.value = null
    }
    
    // Chart data methods for different time ranges
    fun loadSleepTrendData(days: Int) {
        viewModelScope.launch {
            try {
                val data = reportRepository.getSleepTrendData(days)
                _sleepTrendData.value = data
            } catch (e: Exception) {
                _errorMessage.value = "ÏàòÎ©¥ Ìä∏Î†åÎìú Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ïò§Î•ò: ${e.message}"
            }
        }
    }
    
    fun loadTimerTrendData(days: Int) {
        viewModelScope.launch {
            try {
                val data = reportRepository.getTimerTrendData(days)
                _timerTrendData.value = data
            } catch (e: Exception) {
                _errorMessage.value = "ÌÉÄÏù¥Î®∏ Ìä∏Î†åÎìú Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ïò§Î•ò: ${e.message}"
            }
        }
    }
    
    fun loadLifestyleTrendData(days: Int) {
        viewModelScope.launch {
            try {
                val data = reportRepository.getLifestyleTrendData(days)
                _lifestyleTrendData.value = data
            } catch (e: Exception) {
                _errorMessage.value = "ÎùºÏù¥ÌîÑÏä§ÌÉÄÏùº Ìä∏Î†åÎìú Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ïò§Î•ò: ${e.message}"
            }
        }
    }
}

// Enums and Data Classes for Insights
enum class PersonalityType(val displayName: String, val description: String) {
    EARLY_BIRD("ÏïÑÏπ®Ìòï Ïù∏Í∞Ñ", "ÏùºÏ∞ç ÏûêÍ≥† ÏùºÏ∞ç ÏùºÏñ¥ÎÇòÎäî Í∑úÏπôÏ†ÅÏù∏ ÏÉùÌôúÏùÑ ÌïòÍ≥† ÏûàÏñ¥Ïöî"),
    NIGHT_OWL("Ï†ÄÎÖÅÌòï Ïù∏Í∞Ñ", "Î∞§Îä¶Í≤å ÌôúÎèôÌïòÍ≥† Îä¶Í≤å ÏùºÏñ¥ÎÇòÎäî Ìå®ÌÑ¥Ïù¥ÏóêÏöî"),
    NORMAL("ÏùºÎ∞òÌòï", "ÌèâÍ∑†Ï†ÅÏù∏ ÏàòÎ©¥ Ìå®ÌÑ¥ÏùÑ Î≥¥Ïù¥Í≥† ÏûàÏñ¥Ïöî")
}

data class Suggestion(
    val type: SuggestionType,
    val title: String,
    val description: String,
    val priority: SuggestionPriority
)

enum class SuggestionType(val displayName: String, val emoji: String) {
    SLEEP("ÏàòÎ©¥", "üò¥"),
    ALARM("ÏïåÎûå", "‚è∞"),
    TIMER("ÌÉÄÏù¥Î®∏", "‚è±Ô∏è"),
    PRODUCTIVITY("ÏÉùÏÇ∞ÏÑ±", "‚ö°")
}

enum class SuggestionPriority {
    HIGH, MEDIUM, LOW
}