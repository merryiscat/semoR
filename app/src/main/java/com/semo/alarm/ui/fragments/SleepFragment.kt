package com.semo.alarm.ui.fragments

import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import androidx.lifecycle.lifecycleScope
import com.google.android.material.snackbar.Snackbar
import com.semo.alarm.databinding.FragmentSleepBinding
import com.semo.alarm.ui.viewmodels.SleepViewModel
import com.semo.alarm.ui.viewmodels.SleepTrackingState
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.launch
import java.text.SimpleDateFormat
import java.util.*

@AndroidEntryPoint
class SleepFragment : Fragment() {
    
    private var _binding: FragmentSleepBinding? = null
    private val binding get() = _binding!!
    
    private val sleepViewModel: SleepViewModel by viewModels()
    
    private val handler = Handler(Looper.getMainLooper())
    private var elapsedTimeRunnable: Runnable? = null
    private var sleepStartTime: Long = 0L
    
    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentSleepBinding.inflate(inflater, container, false)
        return binding.root
    }
    
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        setupUI()
        observeViewModel()
    }
    
    private fun setupUI() {
        binding.buttonStartSleep.setOnClickListener {
            sleepViewModel.startSleepTracking()
        }
        
        binding.buttonStopSleep.setOnClickListener {
            sleepViewModel.stopSleepTracking()
        }
        
        binding.switchSnoringDetection.setOnCheckedChangeListener { _, isChecked ->
            // TODO: ÏΩîÍ≥®Ïù¥ Í∞êÏßÄ ÏÑ§Ï†ï Ï†ÄÏû•
            showSnackbar(if (isChecked) "ÏΩîÍ≥®Ïù¥ Í∞êÏßÄÍ∞Ä ÌôúÏÑ±ÌôîÎêòÏóàÏäµÎãàÎã§" else "ÏΩîÍ≥®Ïù¥ Í∞êÏßÄÍ∞Ä ÎπÑÌôúÏÑ±ÌôîÎêòÏóàÏäµÎãàÎã§")
        }
    }
    
    private fun observeViewModel() {
        // ÏàòÎ©¥ Ï∂îÏ†Å ÏÉÅÌÉú Í¥ÄÏ∞∞
        sleepViewModel.sleepTrackingState.observe(viewLifecycleOwner) { state ->
            updateUIForTrackingState(state)
        }
        
        // ÌôúÏÑ±ÌôîÎêú ÏàòÎ©¥ Í∏∞Î°ù Í¥ÄÏ∞∞
        sleepViewModel.activeSleepRecord.observe(viewLifecycleOwner) { sleepRecord ->
            if (sleepRecord != null && sleepRecord.isActive) {
                sleepStartTime = sleepRecord.bedtime
                startElapsedTimeUpdates()
            } else {
                stopElapsedTimeUpdates()
            }
        }
        
        // Ïò§Îäò ÏàòÎ©¥ ÏöîÏïΩ Í¥ÄÏ∞∞
        sleepViewModel.todaysSleepSummary.observe(viewLifecycleOwner) { summary ->
            if (summary != null) {
                binding.cardTodaysSummary.visibility = View.VISIBLE
                
                val bedtimeFormat = SimpleDateFormat("HH:mm", Locale.getDefault())
                val bedtime = bedtimeFormat.format(Date(summary.bedtime))
                val wakeupTime = if (summary.wakeupTime != null) {
                    bedtimeFormat.format(Date(summary.wakeupTime))
                } else {
                    "ÏßÑÌñâ Ï§ë"
                }
                
                binding.textTodaysSleepTime.text = "$bedtime ‚Üí $wakeupTime (${summary.sleepDuration})"
                binding.textTodaysSnoring.text = "üò¥ ÏΩîÍ≥®Ïù¥: ${summary.snoringPercentage}%"
            } else {
                binding.cardTodaysSummary.visibility = View.GONE
            }
        }
        
        // ÌèâÍ∑† ÌÜµÍ≥Ñ Í¥ÄÏ∞∞
        sleepViewModel.averageStats.observe(viewLifecycleOwner) { stats ->
            if (stats != null) {
                binding.textAverageSleep.text = "ÏàòÎ©¥: ${stats.averageSleepDuration}"
                binding.textAverageSnoring.text = "ÏΩîÍ≥®Ïù¥: ${stats.averageSnoringPercentage}% (ÌèâÍ∑†)"
                binding.textRecordCount.text = "Í∏∞Î°ù Í∞úÏàò: ${stats.recordCount}Ïùº"
            }
        }
        
        // ÏóêÎü¨ Î©îÏãúÏßÄ Í¥ÄÏ∞∞
        sleepViewModel.errorMessage.observe(viewLifecycleOwner) { errorMessage ->
            if (!errorMessage.isNullOrEmpty()) {
                showSnackbar(errorMessage)
                sleepViewModel.clearErrorMessage()
            }
        }
    }
    
    private fun updateUIForTrackingState(state: SleepTrackingState) {
        when (state) {
            SleepTrackingState.IDLE -> {
                binding.textSleepStatus.text = "ÏàòÎ©¥ ÏÉÅÌÉú: ÎåÄÍ∏∞ Ï§ë"
                binding.textElapsedTime.visibility = View.GONE
                binding.buttonStartSleep.isEnabled = true
                binding.buttonStartSleep.text = "Ï∑®Ïπ® ÏãúÏûë"
                binding.buttonStartSleep.backgroundTintList = 
                    android.content.res.ColorStateList.valueOf(android.graphics.Color.parseColor("#00D4FF"))
                binding.buttonStopSleep.isEnabled = false
                binding.buttonStopSleep.backgroundTintList = 
                    android.content.res.ColorStateList.valueOf(android.graphics.Color.parseColor("#6B7280"))
                stopElapsedTimeUpdates()
            }
            
            SleepTrackingState.STARTING -> {
                binding.textSleepStatus.text = "ÏàòÎ©¥ ÏÉÅÌÉú: ÏãúÏûë Ï§ë..."
                binding.buttonStartSleep.isEnabled = false
                binding.buttonStopSleep.isEnabled = false
            }
            
            SleepTrackingState.TRACKING -> {
                binding.textSleepStatus.text = "ÏàòÎ©¥ ÏÉÅÌÉú: ÏàòÎ©¥ Ï§ë"
                binding.textElapsedTime.visibility = View.VISIBLE
                binding.buttonStartSleep.isEnabled = false
                binding.buttonStartSleep.backgroundTintList = 
                    android.content.res.ColorStateList.valueOf(android.graphics.Color.parseColor("#6B7280"))
                binding.buttonStopSleep.isEnabled = true
                binding.buttonStopSleep.text = "Í∏∞ÏÉÅ"
                binding.buttonStopSleep.backgroundTintList = 
                    android.content.res.ColorStateList.valueOf(android.graphics.Color.parseColor("#00D4FF"))
            }
            
            SleepTrackingState.STOPPING -> {
                binding.textSleepStatus.text = "ÏàòÎ©¥ ÏÉÅÌÉú: Ï¢ÖÎ£å Ï§ë..."
                binding.buttonStartSleep.isEnabled = false
                binding.buttonStopSleep.isEnabled = false
            }
        }
    }
    
    private fun startElapsedTimeUpdates() {
        stopElapsedTimeUpdates() // Í∏∞Ï°¥ Í≤ÉÏù¥ ÏûàÎã§Î©¥ Ï†ïÎ¶¨
        
        elapsedTimeRunnable = object : Runnable {
            override fun run() {
                if (sleepStartTime > 0) {
                    val elapsedMillis = System.currentTimeMillis() - sleepStartTime
                    val elapsedHours = (elapsedMillis / (1000 * 60 * 60)).toInt()
                    val elapsedMinutes = ((elapsedMillis % (1000 * 60 * 60)) / (1000 * 60)).toInt()
                    
                    binding.textElapsedTime.text = "Í≤ΩÍ≥º ÏãúÍ∞Ñ: ${elapsedHours}ÏãúÍ∞Ñ ${elapsedMinutes}Î∂Ñ"
                }
                
                handler.postDelayed(this, 60000) // 1Î∂ÑÎßàÎã§ ÏóÖÎç∞Ïù¥Ìä∏
            }
        }
        
        elapsedTimeRunnable?.let { handler.post(it) }
    }
    
    private fun stopElapsedTimeUpdates() {
        elapsedTimeRunnable?.let { handler.removeCallbacks(it) }
        elapsedTimeRunnable = null
    }
    
    private fun showSnackbar(message: String) {
        Snackbar.make(binding.root, message, Snackbar.LENGTH_LONG).show()
    }
    
    override fun onDestroyView() {
        super.onDestroyView()
        stopElapsedTimeUpdates()
        _binding = null
    }
}